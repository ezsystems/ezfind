[SiteSettings]
# Prepend site URL with http:// or https://
URLProtocol=http://
# Site index public available. For changes to take effect, the search
# index must be updated by running bin/php/updatesearchindex.php
IndexPubliclyAvailable=disabled
# Search other installations
SearchOtherInstallations=disabled

[SearchHandler]
# DefaultSearchHandler: can be any of standard, simplestandard, ezpublish, heuristic
# standard: the Solr standard handler is called with all syntax supported,
#    searching is done against all searcheable fields
# simplestandard: the Solr standard handler is called with all all syntax
#    supported, searching is done against the aggregated field ezf_df_text
# ezpublish: the recommended handler (Solr edismax based) for typical user
#    searches where also wildcards and fuzzy operators from the Lucene / Solr syntax
#    are supported
# heuristic: depending on the presence  of special characters indicating boolean,
#    wildcard or fuzzy expressions, either the standard or dismax handler is called
DefaultSearchHandler=ezpublish


[LanguageSearch]
# It is possible to search all languages simultaneously, but the common use case is to search only the main language
#
# Example :
# in site.ini :
#
# [RegionalSettings]
# SiteLanguageList[]
# SiteLanguageList[]=eng-GB
# SiteLanguageList[]=fre-FR
#
# When SearchMainLanguageOnly is set to 'enabled', only results in the first language
# in site.ini[RegionalSettings].SiteLanguageList[] will be returned.
#
# When SearchMainLanguageOnly is set to 'disabled', results will be returned with respecting
# the fallback defined in site.ini[RegionalSettings].SiteLanguageList[] and the always available flag:
#   Of all matching results, the ones in eng-GB will be returned, and in case no translation in
#   eng-GB exists for a result, it will be returned in fre-FR if existing.
SearchMainLanguageOnly=enabled

# Multicore = enabled|disabled
# If enabled, each language will be indexed in a distinct solr core in order to
# provide better language specific analysis
#MultiCore=enabled
MultiCore=disabled

# Default solr core
# - deprecated in eZ Find 2.3
# This is used for two purposes:
# - index languages that aren't mapped to a specific core
# - as a hub when searching, since one core must contact all the other ones
DefaultCore=eng-GB

# Each language must be mapped to its own core
# Unmapped languages won't be indexed, so make sure the configuration is
# complete
# Syntax: LanguagesCoreMap[<locale>]=<coreName>
# Example: LanguagesCoreMap[eng-GB]=eng-GB
LanguagesCoresMap[]
#LanguagesCoresMap[eng-GB]=eng-GB
#LanguagesCoresMap[fre-FR]=fre-FR
#LanguagesCoresMap[nor-NO]=nor-NO

[AutoCompleteSettings]
# Enables or disables autocomplete feature
# Note: you better set this per siteaccess when its really intended to be used as
# it may put significant extra load on the search server
# See also the FacetMethod setting for performance
#AutoComplete=enabled
# The maximum number of suggestions to return from search engine.
Limit=10

# Facet field used by autocomplete.
FacetField=ezf_sp_words

#FacetMethod can be either fc (also Solr default) or enum (for very large indexes)
FacetMethod=fc
# Number of characters that must be entered before querying for results.
# A negative value effectively turns off the widget. A value of 0 allows
# queries of null or empty string values.
MinQueryLength=2

[SpellCheck]
#SpellCheck = enabled | disabled
SpellCheck=enabled
#DefaultDictionary: default only for now, realms (for example per language, or using
#   external dictionaries) to be supported later
#   this can also be specied in the spellcheck parameters in search requests
DefaultDictionary=default

[FacetSettings]
# Installation name map. The key is the installation ID,
# and the value is the name to use for display by the design templates.
#
# Use this SQL to get the value : SELECT value FROM ezsite_data WHERE name='ezfind_site_id';
# Example:
# SiteNameList[]
# SiteNameList[3e731797af0a6b79e943eefaf437f956]=eZ.no
SiteNameList[]

[SolrFieldMapSettings]
# List of custom datatype mapping. eZ Publish datatype string is used
# as key, and the value if the name of the class to use.
#
# Example:
# CustomMap[eztext]=ezfSolrDocumentFieldText
CustomMap[dummy_example]=ezfSolrDocumentFieldDummyExample
CustomMap[ezobjectrelation]=ezfSolrDocumentFieldObjectRelation
CustomMap[ezobjectrelationlist]=ezfSolrDocumentFieldObjectRelation
CustomMap[ezxmltext]=ezfSolrDocumentFieldXML
CustomMap[ezmatrix]=ezfSolrDocumentFieldXML

# since eZ Find 2.3
# in case eztext attributes are used to store also (partial) html markup
# the custom xml handler can be used too to avoid highlighting problems
# CustomMap[eztext]=ezfSolrDocumentFieldXML

# Datatype to field type map.
# Since ez find 2.2, this means searching
# as for facets, sorting, others mappings may be used

DatatypeMap[ezstring]=text
DatatypeMap[eztext]=text
DatatypeMap[ezboolean]=boolean
DatatypeMap[ezdate]=date
DatatypeMap[ezdatetime]=date
DatatypeMap[ezfloat]=sfloat
DatatypeMap[ezinteger]=text
DatatypeMap[ezprice]=sfloat
DatatypeMap[eztime]=date
DatatypeMap[ezkeyword]=lckeyword
DatatypeMap[ezselection]=text


# Since ez find 2.2
# Mapping for datatypes to sortable fields
# This means usually very little transformations at index time
# If not specified, the search mapping is used
DatatypeMapSort[]
DatatypeMapSort[ezstring]=string
DatatypeMapSort[ezinteger]=sint
DatatypeMapSort[ezselection]=string

# Since ez find 2.2
# For facets, the mapping is also tbe re-used for facet filters
# This may be different from normal filtering, which may rather use the
# normal search fields types (tokenized fully, stemmed, ...)
DatatypeMapFacet[]
#DatatypeMapFacet[ezstring]=simpletext
#DatatypeMapFacet[ezkeyword]=lckeyword
DatatypeMapFacet[ezinteger]=tint
DatatypeMapFacet[ezselection]=string

DatatypeMapFilter[]
#DatatypeMapFilter[ezstring]=simpletext
#DatatypeMapFilter[ezkeyword]=lckeyword
DatatypeMapFilter[ezinteger]=tint
DatatypeMapFilter[ezselection]=string



# Default field type
Default=text


#Allows to have specific handlers for atributes instead of generalizing it for datatypes
#This makes it easier for example to store structured content inside eztext attributes
CustomAttributeMap[]
#
#CustomAttributeMap[class_identifier/attribute_identifier]=ezfSolrDocumentFieldMetaData


[IndexOptions]
## OptimizeOnCommit controls the behaviour of the addObject and deleteObject calls
# with respect to Optimizing the Solr Index on commits
# If turning this off, a cron job should be set up to schedule optimize actions
OptimizeOnCommit=enabled

## DisableDirectCommits: if true, another mechanism must be enabled to do commits: cronjob,
# solrconf.xml or by giving CommitWithin a positive value (expressed in milliseconds)
DisableDirectCommits=false
## If set to a positive value will add those delays with every addObject call
# if set to 0 (default), it will be ignored
# the unit is milliseconds
CommitWithin=0
# DisableDeleteCommits=true|false
# Be careful with this option, deleted objects may still show up in search results, leading to (fatal) errors
# Make sure you have a frequent commit cronjob enabled if you set it to true to minimize errors
DisableDeleteCommits=false
# Configure attribute storage in the Solr backend
# Warning: this may inflate the index size on large installations
# indexing is also 20-30% slower as more operations are needed on the eZ Publish side
# EnableSolrAttributeStorage=true | false
EnableSolrAttributeStorage=false

###Boost factors used when indexing
#When multiple boost factors match, they are ADDED, not multiplied
#be ware of mixin boost factors on class and attribute level: Solr/Lucene does MULTIPLY the class boost factor with the attribute boost factor

[IndexBoost]
#MetaField: set boost factors on meta fields, boost per field
# Metafield: not yet implemented !!
MetaField[]
#MetaField[name]=2.0
#MetaField[owner_name]=2.0

#ClassBoost: set boost factors on document (object) level
#format Class[<attribute identifier>]=<boost factor as int or float>
Class[]
#Class[user]=3.0

#AttributeBoost: set boost factors on attributes at field level
#you can specify the class identifier as optional (!) element for greatest flexibility
#If more than attributeidentifier is used, the last one has precedence
Attribute[]
#Attribute[user/last_name]=2.0
#Attribute[user/first_name]=2.0
#Attribute[title]=1.5

#AttributeBoost: set boost factors on attributes at field level based on their datatype
Datatype[]
#Datatype[ezkeyword]=3.0

#ReverseRelatedScale: scale factor to use in $boost = $boost + <scalefactor> * <number of reverse relations>

ReverseRelatedScale=0
#ReverseRelatedScale=0.5

[IndexExclude]
#exclude certain objects from indexing alltogether
#only classes supported for now

ClassIdentifierList[]
#ClassIdentifierList[]=folder
#ClassIdentifierList[]=secret

[SearchFilters]
#Search filters to be applied for every query made
#Expert settings!
#Currently support for one filter type, a raw Solr query string
RawFilterList[]
#Example to exclude certain classes
#RawFilterList[]=meta_class_identifier_s:[* TO *] -meta_class_identifier_s:(folder article)

#Workaround for non indexed hidden nodes
#Needed for eZP 4.0 and 4.1 without the cronobs enabled
#Set to enabled if this is the case
FilterHiddenFromDB=disabled

[MoreLikeThis]
#Experimental!!
#fields to use for query term extraction: proper fields "native",
# or "general" which uses the aggregate field ezf_df_t currently (subject to change, best is to have
# dedicated aggregator fields with their own analyzers -- omitting stemming for example)
ExtractionFields=general
#tuning parameters for more like this
#minimum term frequency
MinTermFreq=1
#Minimum document frequency
MinDocFreq=1
#Minimum word length
MinWordLength=4
#Maximum word length
MaxWordLength=30
#Maximum query terms to extract from the object
MaxQueryTerms=10
#Use popularity to boost the query terms
BoostTerms=true

# configuration parameters for highlighting
[HighLighting]
# true or false to enable or disable the highlighting
# will be passed in hl parameter of the query Solr
# http://wiki.apache.org/solr/HighlightingParameters#hl
Enabled=true
# highlight only matched fields or not
# will be passed in hl.requireFieldMatch of the Solr query
# http://wiki.apache.org/solr/HighlightingParameters#hl.requireFieldMatch
# true or false. Set to false if Solr becomes slow with very big documents
# see http://issues.ez.no/18605
RequireFieldMatch=true
# tag to use before and after an highlighted text
# http://wiki.apache.org/solr/HighlightingParameters#hl.simple.pre.2BAC8-hl.simple.post
SimplePre=<b>
SimplePost=</b>
SnippetsPerField=1
FragmentSize=200


[IndexPlugins]
# Allow injection of custom fields and manipulation of fields/boost parameters
# at index time
# This can be defined at the class level or general
General[]
#General[]=ezfIndexParentName

#Classhooks will only be called for objects of the specified class
Class[]
#Class[folder]=ezfIndexParentName


[SearchResultClustering]
#Engine=name


[ExtendedAttributeFilters]
# Lists available extended attribute filters
# Key is filter ID, value is related PHP class which must extend eZFindExtendedAttributeFilter
# See classes/extendedattributefilters/ezfindgeodistextendedattributefilter.php for example
FiltersList[]
FiltersList[geodist]=eZFindGeoDistExtendedAttributeFilter

[QueryBoost]
RawBoostQueries[]
#RawBoostQueries[]=meta_class_identifier_ms:folder^10